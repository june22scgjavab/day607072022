Package Explorer
Code editor
Save the file/files
Execute the code.
Try to read .... copy the error and put it in google and search for the error.
--------------------------------------------------------------------------------------------------------------

Class Hello {
    public static void main(String[] args){
      System.out.println("Hello");
    }
 }

/* Compilation error as the keyword C is in uppercase */
Syntax error on token "Class", class expected.


class hello {
    public static void main(String[] args){
      System.out.println("Hello");
    }
}

/* The code will execute. Though while writing the user defined class we wrote the class in smallcase.
   So for user defined class we can write in smallcase , but it is breaking the convention of writing class */

class Hello {
    public static void main(String[] args){
      system.out.println("Hello");
    }
}

/* The predefined classes like String and System we cannot write it with any case and that has to start with 
   uppercase. */


class Hello {
    public static void main(String[] args){
      System.out.println("Hello")
    }
}
/* We are not up with ; */


class Hello {
    public static void main(String[] args){
      int i;
      System.out.println(i);
    }
}
/* We should initialise the variable i */

class Data {
    public static void main(String[] args){
      int i;
      //System.out.println("HEllo");
    }
}

/* We wont get any error because we are not accessing the variable.



class Data {
    public static void main(String[] args){
      int i;
      int j=10;
      int result=j+i;
     
    }
}

/* So again error */


class IncrementDemo1 {
   public static void  main(String args[]) {
    int num=12;
    int result= num++;
    System.out.println(result);
    System.out.println(num); 
   }
 }


class IncrementDemo1 {
   public static void  main(String args[]) {
    int num=12;
    int result= num--;
    System.out.println(result);
    System.out.println(num); 
   }
 }

class DataDemo {
   public static void main(String args[]) {
    int roll=1;
    String name="Akash";
    int marks=20;
    System.out.println("ROLL"+roll+" "+"NAME"+name+" "+"MARKS"+marks);
   }
}
 

class DataDemo1 {
   public static void main(String args[]) {
    int roll=1;
    String name="Akash";
    int marks=20;
    System.out.println("ROLL: "+roll+"\n"+"NAME: "+name+"\n"+"MARKS: "+marks);
   }
}
---------------------------------------------------------------------------

class Data1 {
    public static void main(String args[]){
     int a=5;
     int b=2;
     int c=a/b;
     System.out.println(c);  // 2
    }
  }
        
class Data2 {
    public static void main(String args[]){
     int a=5;
     int b=2;
     float c=a/b;  //5/2  2.5===> 2 ===> 2.0
     System.out.println(c);  // 2.0
    }
  }

 class Data3{
    public static void main(String args[]){
    int num=5;
    float f=num;
    System.out.println(f); //5.0
   }
 }

class Data4{
    public static void main(String args[]{
      int a=5;
      int b=2;
      float f=(float)a/b;
      System.out.println(f); // 2.5
    }
  }
[ SO PLEASE CHECK CAREFULLY THE OPERATIONS WHEN WE HAVE THE DIFFERENT DATA TYPES IN AN EXPRESSION.]
-----------------------------------------------------------------------------------------
Control Structures:-
   * Condition Check 
      if() / if.... else /if else if else if else
      switch() {   case 1 : statement/statements ; case 2 : statement/statements ; default : statement/statements   } ; 
   * Iterations
      while {}, do{}while, for

-------------------------------------------------------------------------------------------------------

public class IfDemo1 {

	public static void main(String[] args) {
	
		int marks=45;
		if(marks>=90) {
			System.out.println("Good score");
		}

	}

}
=======================================================================

   public class IfDemo2 {

	public static void main(String[] args) {
	
		int marks=45;
		if(marks>=90) {
			System.out.println("Good score");
		}
                else{
                    System.out.println("Work Hard!!!!");
                }

	}

}


public class IfDemo3 {

	public static void main(String[] args) {
	
		int marks=45;
		if(marks>=90) 
			System.out.println("Good score");
		
                else
               
                	System.out.println("Work Hard!!!!");
               

	}

}

[ In the above code in if block we have just a single statement to execute and that is the reason we have
not enclosed the statement within braces, but good practice is even to put a single statement in a brace. ]
So the code similar to IfDemo2 should be used. 

public class IfDemo4 {

	public static void main(String[] args) {
	
		int marks=75;
		if(marks>=90) 
		{
			System.out.println("Good score");
		}
		else if(marks>=70 && marks<90) {
			System.out.println("Done well");
		}
		
         else
                {
                	System.out.println("Work Hard!!!!");
                }

	}

}
--------------------------------------------------------------------------------------------------------
Nested If : ------> If construct within another If construct.

We will be commenting on marks , if the marks is a positive value.



public class IfDemo5 {

	public static void main(String[] args) {
	
		int marks=-10;
          if(marks>0)
            {
		if(marks>=90) 
		{
			System.out.println("Good score");
		}
		else if(marks>=70 && marks<90) {
			System.out.println("Done well");
		}
		
         else
                {
                	System.out.println("Work Hard!!!!");
                }

           } // end of outer if
           else{
                System.out.println("Please enter valid marks");
               }

	}  // End of main

}   // End of class

-------------------------------------------------------------------------------------------------------------
switch case  

Whether I should use if or we should go for using switch case for condition check?

Design a menu based program to perform add/subtract/divide/multiply

   public class Calculator {
    public static void main(String args[]){
    int num1=10;
    int num2=5;
    int choice=1;
    System.out.println("1) ADD");
    System.out.println("2) SUBTRACT");
    System.out.println("3) MULTIPLY");
    System.out.println("4) DIVIDE");
    switch(choice){
     case 1 : System.out.println(num1+num2);
              break;
     case 2  : System.out.println(num1-num2);
               break;
     case 3  : System.out.println(num1*num2);
               break;
     case 4  : System.out.println(num1/num2);
              break;
     default : System.out.println("The choice is incorrect!!!!");
     } // end of switch case
      
    System.out.println("Bye bye from calculator");
   } // end of main
}  // end of class

  
-----------------------------------------------
 public class Calculator1 {
    public static void main(String args[]){
    int num1=10;
    int num2=5;
    int choice=2;
    System.out.println("1) ADD");
    System.out.println("2) SUBTRACT");
    System.out.println("3) MULTIPLY");
    System.out.println("4) DIVIDE");
    switch(choice){
     default : System.out.println("The choice is incorrect!!!!");
              break;
     case 1 : System.out.println(num1+num2);
               break;
     case 2  : System.out.println(num1-num2);
               break;
     case 3  : System.out.println(num1*num2);
               break;
     case 4  : System.out.println(num1/num2);
               break;
     
     } // end of switch case
      
    System.out.println("Bye bye from calculator");
   } // end of main
}  // end of class


[ Can we have default in any position within the switch block?
  Yes

 ]

---------------------------------------------------------------------------------------------------
Iterations:

/* Enter roll name and marks and display till user enters yes */  
     while {}

 import java.util.Scanner;
   public class WhileDemo1{
     public static void main(String args[]){
     int roll;
     String name;
     int marks;
     Scanner scan=new Scanner(System.in); // We are creating an object of Scanner class
     //Scanner class object will help us to accept user inputs
     String ans="yes";
     while(ans.equalsIgnoreCase("yes")){
        System.out.println("Enter the roll number");
        roll=scan.nextInt();  // nextInt() is a predefined method of Scanner classto accept an int value.
        System.out.println("Enter the name");
        name=scan.next(); // next() is a method to accept a String and we have another method of String which          // is nextLine(); next() wont allow to accept multiple words ... with next we can enter a single word
      // ravi can be entered with next but to enter Ravi Kumar Sharma we have to use nextLine()
         System.out.println("Enter the marks");
         marks=scan.nextInt();
         System.out.println("ROLL: "+roll+"\n"+"NAME: "+name+"\n"+"MARKS: "+marks);
         System.out.println("Do you want to continue?");
         ans=scan.next();
      } // end of while loop
     } // end of main method
   }  // end of class

---------------------------------------------------------------------------------------------------------------

With if , we can compare a range of values but in case of switch case we can go for selective constant
choices. So if we have some fixed set of options/choices to compare then we will go for switch construct.

---------------------------------------------------------------------------------------------------------

Difference between while and do while loops...
while loop is an entry point loop as the condition is checked while entering the while loop whereas
do while loop is an exit point check loop as the condition is checked after the loop is getting executed.
So in case of do while loop if the condition is false , then also it will execute once.

public class WhileDemo {
  public static void main(String args[]){
     int i=10;
     while(i<10){
      System.out.println("I am within the loop");
      i++;
     }
     System.out.println("Outside the loop");
   }
 }


public class DoWhileDemo {
  public static void main(String args[]){
     int i=10;
    do{
      System.out.println("I am within the loop");
      i++;
     }while(i<10);
     System.out.println("Outside the loop");
   }
 }

----------------------------------------------------------------------------------------------------
while ... do while ... for loop
public class ForLoopDemo1 {
   public static void main(String args[]){
   for(int i=1;i<11;i++){
          System.out.println(i);
    }

   }
 }

public class ForLoopDemo2 {
   public static void main(String args[]){
   for(int i=1;i<11;i=i+2){
          System.out.println(i);
    }

   }
 }

public class ForLoopDemo3 {
   public static void main(String args[]){
    int i=1;
   for(;i<11;i=i+2){
          System.out.println(i);
    }

   }
 }

public class ForLoopDemo4 {
   public static void main(String args[]){
    int i=1;
   for(;i<11;){
          System.out.println(i);
          i++;
    }

   }
 }


public class ForLoopDemo5 {
   public static void main(String args[]){
 
   for(;;){
          System.out.println("Hello");
         
    }

   }
 }
[ The above code display Hello infinite number of times.
-------------------------------------------------------------------------------------------------------
break;

Enter numbers from user until unless user enters 0 and perform the addition of the entered numbers.

import java.util.Scanner;
public class BreakDemo {
   public static void main(String args[]){
   Scanner scanner=new Scanner(System.in);
   int num;
   int sum=0;
 
   while(true){
	   System.out.println("Enter the number");
	   num=scanner.nextInt();
     if(num==0){
       break;
     }
   /* else{
      sum+=num;
     } */
     sum+=num;
   }
   System.out.println("The added value:"+sum);
   }
}
-----------------------------------------------------------------------------------
continue
Wherever we use continue , the code wont execute anything after the continue statement and the control
will move to the next iteration. Continue accepting a value from user
and if the value is even , then only perform the sum otherwise continue
with the next iteration and with 0 stop the execution.
import java.util.Scanner;
public class ContinueDemo {
   public static void main(String args[]){
   Scanner scanner=new Scanner(System.in);
   int num;
   int sumEven=0;
 
   while(true){
	   System.out.println("Enter the number");
	   num=scanner.nextInt();
     if(num==0){
       break;
     }
     if(num%2!=0){
      continue;
     }

     sumEven+=num;
   }
   System.out.println("The added value of even numbers:"+sumEven);
   }
}

------------------------------------------------------------------------------------------------------
Till now whatever code we wrote , everything we performed within the main method. But that is not a very good
way of writing code. One point we understood that main method has to be there otherwise we wont be able to
execute our code.

Let us create a class Called Greet, which will have the message Hello Friends!!!!.

public class Greet1 {
    public static void main(String args[]){
     String message="Hello Friends!!!";
     System.out.println(message);
   }
 }

[ Here we are declaring message local to main method. local means confined to a block ( that block can be 
a method or if construct or a loop construct )]

What about accessing the message in some other method like display().


public class Greet2 {
  
   public static void display(){
    System.out.println("Hello Friends");
   }

   public static void main(String args[]) {
     display();   
  }
 }
   
// we made one different method display to print Hello Friends. display is again static method with return 
value as void. 
Do we need to write static with all the other methods also?
Ans : No

public class Greet3 {
  
   public  void display(){
    System.out.println("Hello Friends");
   }

   public static void main(String args[]) {
    // display();
	//Cannot make a static reference to the non-static method display() from the type Greet3
  }
 }


public class Greet4 {
   public void display(){
    System.out.println("Hello Friends");
   }

   public static void main(String args[]) {
     Greet4 greet=new Greet4();
       greet.display();
	//Cannot make a static reference to the non-static method display() from the type Greet3
  }
 }

[ Dont try to keep everything within the main method ... Try to design different method for performing specific
tasks. ]
--------------------------------------------------------------------------------------------------------

Design a class Calculator with methods like add,subtract,divide and multiply and call them from the main method.


public class CalculatorExercise1 {

// add()
// subtract()
// divide()
// multiply()

 public static void main(String[] args){
 add();
 subtract();
 divide();
 multiply();
}



}
--------------------------------------------------------------------------------------------------------------
import java.util.Scanner;
public class CalculatorExercise1 {
public void add(){
  int num1=20;
  int num2=10;
  int result=num1+num2;
  //System.out.println(num1+num2);
  System.out.println("The result is "+result);
}

 public void subtract(){
 int num1=100;
 int num2=20;
 int result=num1-num2;
 System.out.println("The result is "+result); //result 
}
// divide()
// multiply()

 public static void main(String[] args){
 CalculatorExercise1 calculator=new CalculatorExercise1();
 calculator.add();
 calculator.subtract();
 //calculator.divide();
 //calculator.multiply();
}
}



// Let us plan an alternative of user input to make it better.

import java.util.Scanner;
public class CalculatorExercise1b {

public void add(){
  int num1;
  int num2;
  Scanner scan=new Scanner(System.in);
  System.out.println("Enter the value of num1");
  num1=scan.nextInt();
  System.out.println("Enter the value of num2");
  num2=scan.nextInt();
  int result=num1+num2;
  //System.out.println(num1+num2);
  System.out.println("The result is "+result);
}

 public void subtract(){
  int num1;
  int num2;
  Scanner scan=new Scanner(System.in);
  System.out.println("Enter the value of num1");
  num1=scan.nextInt();
  System.out.println("Enter the value of num2");
  num2=scan.nextInt();
 int result=num1-num2;
 System.out.println("The result is "+result); //result 
}
// divide()
// multiply()

 public static void main(String[] args){
 CalculatorExercise1b calculator=new CalculatorExercise1b();
 calculator.add();
 calculator.subtract();
 calculator.divide();
 calculator.multiply();
}
}











-----------------------------------------------------------------------------------------------------------
public class CalculatorExercise1c {
 //int num1,num2;  // instance variables/attributes/properties/member variables


public void add(int num1,int num2){  // num1 and num2 as parameters are local to add method
  int result=num1+num2;
  //System.out.println(num1+num2);
  System.out.println("The result is "+result);
}

 public void subtract(int num1,int num2){
 int result=num1+num2;
 System.out.println("The result is "+result); //result 
}
// divide(int num1,int num2)
// multiply(int num1,int num2)

 public static void main(String[] args){
 CalculatorExercise1c calculator=new CalculatorExerise1c();
 Scanner scan=new Scanner(System.in);
 int num1;
 int num2;    // This num1 and num2 are local to the main method
 System.out.println("Enter the value for num1");
 num1=scan.nextInt();
 System.out.println("Enter the value for num2");
 calculator.add(num1,num2);
 calculator.subtract(num1,num2);
 calculator.divide(num1,num2);
 calculator.multiply(num1,num2);
}
}


[ 3 sets of num1 and num2 out of which the instance variable are no where used in the code.]
-----------------------------------------------------------------------------------------------------------
// Not to repeat data entry make a common method for data entry

public class CalculatorExercise1d {
 
int num1,num2;  // instance variables/attributes/properties/member variables

// add(), subtract(), divide() and multiply() are called as methods/member methods
public void add(){  
  int result=num1+num2;
  //System.out.println(num1+num2);
  System.out.println("The result is "+result);
}

 public void subtract(){
 int result=num1+num2;
 System.out.println("The result is "+result); //result 
}
 public void divide(){
 int result=num1/num2;
 System.out.println("The result is "+result);
 }
 public void multiply(){
 int result=num1*num2;
 System.out.println("The result is "+result);
 }

  public void setData(int n1,int n2){
   num1=n1;
   num2=n2;
  }

 public static void main(String[] args){
 CalculatorExercise1d calculator=new CalculatorExercise1d();
 Scanner scan=new Scanner(System.in);
 int num1;
 int num2;    // This num1 and num2 are local to the main method
 System.out.println("Enter the value for num1");
 num1=scan.nextInt();
 System.out.println("Enter the value for num2");
 num2=scan.nextInt();
 calculator1d.setData(num1,num2);
 calculator.add();
 System.out.println("Enter the value for num1");
 num1=scan.nextInt();
 System.out.println("Enter the value for num2");
 num2=scan.nextInt();
 calculator1d.setData(num1,num2);
 calculator.subtract();
 System.out.println("Enter the value for num1");
 num1=scan.nextInt();
 System.out.println("Enter the value for num2");
 num2=scan.nextInt();
 calculator1d.setData(num1,num2);
 calculator.divide();
 System.out.println("Enter the value for num1");
 num1=scan.nextInt();
 System.out.println("Enter the value for num2");
 num2=scan.nextInt();
 calculator1d.setData(num1,num2);
 calculator.multiply();
}


}

// How from setData we need to pass the data for add,subtract,divide,multiply.